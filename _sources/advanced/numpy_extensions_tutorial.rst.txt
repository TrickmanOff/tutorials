
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.4311,  4.5375,  3.5698,  5.5107, 10.1917],
            [ 3.7054,  6.7149, 13.0627,  6.4939,  6.1662],
            [ 5.4363,  9.5514, 13.5703,  5.6674,  5.6811],
            [11.5392,  3.0194,  4.8245,  6.5564,  3.1275],
            [ 8.1576, 12.5278,  3.3533,  3.1437,  3.4066],
            [11.5392,  2.9711,  8.8722,  4.5835,  3.1275],
            [ 5.4363,  9.6513,  5.3044,  4.7324,  5.6811],
            [ 3.7054,  3.1286, 12.2815,  3.7310,  6.1662]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2282,  0.5587, -0.4057,  0.8263, -0.0159,  1.1661, -0.7894, -2.1725],
            [ 1.3472,  0.5659, -0.8547, -0.2398, -0.1112, -0.2891, -2.1766, -1.2568],
            [ 0.2464, -0.4968, -0.0032,  1.0575,  0.9718, -0.0474,  0.5937,  0.2665],
            [ 0.6387, -0.3592, -0.3019,  0.0619, -0.7874, -0.6116,  2.1477,  1.4223],
            [-1.3282, -0.9611,  1.1424, -0.3391, -0.3788,  0.3429,  0.0885, -0.3868],
            [ 0.1551,  0.4695,  2.0559,  0.8749,  0.5832, -0.7276,  0.4518,  0.4634],
            [ 0.7956, -0.9642, -1.6393,  0.5146,  1.6543, -0.7661, -0.1456, -0.9766],
            [ 0.8337,  0.4602,  0.8557, -0.6195,  0.8011,  0.0233,  1.1583, -0.2403]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1883, -1.2449,  0.8730],
            [-1.2270,  0.6603,  0.4935],
            [-1.6515, -0.6605,  0.6511]], requires_grad=True), Parameter containing:
    tensor([[-1.7674]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.5639e+00, -3.4628e-01, -2.3723e+00, -3.9809e+00,  2.1398e+00,
              4.3966e-01, -3.5617e+00, -3.1057e+00],
            [-3.9081e+00, -3.8987e+00,  9.6577e-01, -2.1227e+00, -8.4482e-01,
              4.1463e+00, -1.0524e+00, -5.3430e+00],
            [-1.3834e+00, -3.0758e+00, -3.7302e-01, -2.8368e+00,  1.8408e+00,
             -2.3511e-01, -2.9503e+00, -4.2890e+00],
            [-7.3561e+00,  1.8576e+00, -1.4778e+00, -1.7177e+00, -7.3251e-01,
             -2.7262e+00, -1.5231e+00, -1.3737e+00],
            [-2.0379e-03, -7.3998e-01, -3.3147e+00, -1.1657e+00, -1.0172e+00,
             -1.6312e+00,  1.9084e+00, -1.9229e+00],
            [ 2.4093e+00, -7.9146e-01, -2.9578e+00, -1.2489e+00, -4.3524e+00,
             -6.5038e-01, -2.8884e+00,  6.3340e-01],
            [ 6.1894e-01, -3.3497e+00, -2.2080e+00, -9.7818e-01, -6.7649e+00,
              5.8779e-01,  8.1347e-01, -2.2215e+00],
            [ 1.9624e+00, -5.9720e+00,  2.4460e+00, -7.3406e-01, -3.6405e+00,
             -3.5072e+00,  2.8430e-01,  5.6209e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.9197e-02, -6.5035e-01, -1.6931e+00,  3.3565e+00,  1.1199e+00,
             -2.0035e+00,  7.2434e-01, -1.9252e+00, -1.8251e-01,  7.9335e-01],
            [-4.3565e-01, -2.5887e+00,  4.0437e+00,  1.3450e+00, -3.7584e+00,
             -5.5488e-01,  1.6407e+00, -2.6725e+00,  2.7719e-01,  1.2975e+00],
            [-1.1829e+00, -1.7372e+00,  1.6523e+00,  3.8197e+00,  1.7382e-01,
             -9.4510e-01,  7.0905e-01, -4.4434e+00,  1.4868e+00,  4.7983e-01],
            [-9.7695e-01,  1.4862e+00, -9.1065e-01, -4.5711e-01, -8.2948e+00,
              6.1400e+00,  1.4409e+00, -3.6517e+00, -3.3536e-01,  2.4089e-01],
            [ 2.3473e-01, -6.4887e-01,  2.0697e+00,  1.3164e+00,  4.1998e-01,
             -5.7230e-01,  6.8991e-01,  2.6281e+00, -1.6956e+00,  4.6528e-01],
            [-1.5016e-01, -3.7702e+00, -2.5430e-01, -1.4125e+00, -3.9570e-01,
              3.7552e+00, -8.4559e-01, -2.8023e+00,  1.9676e+00, -2.8820e-01],
            [-2.4968e+00,  1.1382e+00,  6.8013e-01,  7.3532e-01,  2.1655e+00,
             -8.7934e-01, -2.4641e-01,  2.0039e-01, -2.3448e+00,  5.3525e-01],
            [-3.0013e+00, -2.8014e+00,  2.3333e+00, -1.4168e+00,  2.5205e+00,
              3.4647e+00, -1.4322e+00,  2.0145e+00,  1.1478e+00, -1.1192e+00],
            [ 2.0982e-02, -8.4988e-01, -7.8040e-01, -5.4908e-01,  8.3212e-02,
             -4.5606e-01,  1.3718e+00,  2.7765e-01, -1.2046e+00, -1.8892e-01],
            [-1.4435e-01,  3.2103e-01, -3.4619e-01, -1.0084e+00,  4.3640e-01,
             -2.7435e-01,  8.4621e-01,  2.1236e+00,  6.0328e-03, -5.1829e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.172 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
