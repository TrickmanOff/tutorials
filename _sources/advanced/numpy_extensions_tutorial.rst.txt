
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.8014, 10.2227,  2.8561,  3.5869,  0.8824],
            [ 0.8027, 11.7653,  2.4741,  3.4302,  5.6154],
            [ 5.2667,  2.0227,  4.8178,  5.8449, 14.7604],
            [ 3.8675,  9.9146,  8.9203,  6.6883,  4.1039],
            [ 7.8035,  5.4770,  8.1746,  9.9814,  5.9200],
            [ 3.8675,  1.1404, 12.8291,  7.9306,  4.1039],
            [ 5.2667, 12.2202,  4.7311,  2.2011, 14.7604],
            [ 0.8027,  5.3217,  5.3696,  3.8964,  5.6154]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8387, -1.2326,  0.1858,  0.2082, -0.3279, -0.4510, -1.0585,  0.4646],
            [-0.7271,  1.3817, -1.2125,  0.9740, -0.5306,  0.0395,  0.0639, -0.1968],
            [-1.9263, -0.6823,  0.5208,  0.0373,  0.7717,  0.8475,  0.9438,  0.0204],
            [ 1.1823, -1.6719, -0.9845,  0.9682,  2.2043, -0.6316,  0.7651, -0.9817],
            [-0.2210,  0.3287,  0.7515, -0.4052, -0.4311, -0.4613, -0.4596, -0.4079],
            [-1.3195,  1.5938,  0.6895,  0.0472,  0.3955, -0.4492, -0.3081, -0.7050],
            [-0.3456, -0.0117,  0.8554,  1.7447, -0.5700, -0.2612, -1.5110, -0.8799],
            [ 0.5581,  0.4044,  0.4581, -1.6039,  0.5084,  0.9227,  1.4585, -0.2914]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3645,  0.3587, -1.7794],
            [ 1.5100, -0.8961,  1.3972],
            [ 0.8113,  0.1302, -0.8530]], requires_grad=True), Parameter containing:
    tensor([[1.0519]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.4117, -3.2456,  1.7816,  2.7829, -1.3305,  4.6885, -0.0133, -0.9618],
            [ 5.3985,  4.3567, -0.7999,  5.1280, -2.3193, -2.0161, -0.2956, -3.8794],
            [-0.7903, -1.8183,  3.7848,  2.0246, -3.8691,  2.8260, -1.7180,  5.8582],
            [ 1.2499,  1.4087,  6.5521,  4.5937, -0.1415, -1.8862,  1.2726,  0.5691],
            [ 4.1997,  0.1666,  2.7531,  4.5936, -2.3657, -6.5061,  0.6073,  0.4169],
            [-4.1308, -2.3770,  3.8645,  3.5895,  1.8548,  2.2045, -1.3480,  4.4537],
            [-0.1323,  4.5324,  1.9220,  4.3663,  7.0053,  1.2200,  1.7422,  5.8047],
            [ 3.0608,  0.5403,  4.0624,  1.1856,  4.3414,  3.2058,  2.9584, -1.2134]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1791,  0.0222,  0.5506, -1.0984,  3.5353, -1.3353, -3.0837, -0.3095,
             -1.0813,  3.9212],
            [-1.1616,  0.8787, -1.3126,  3.1310, -0.3194,  1.0477,  3.4367, -4.2394,
              1.0419, -3.6410],
            [-2.4291,  0.7884, -1.3789,  1.8839,  1.7666, -1.6004, -0.3261, -1.4944,
              0.4174,  2.1909],
            [-2.9451, -2.1958,  5.3070, -1.8050,  2.3981, -1.1029,  2.9692, -2.0649,
              0.4073,  0.2809],
            [-4.1277, -0.2547, -2.4812,  5.9713, -7.6154,  5.5203, -5.4654,  3.9882,
              0.8670,  1.1731],
            [-2.4142, -1.4932,  2.8816, -1.6271, -0.6530, -1.3403,  2.0443, -4.0036,
             -0.5441, -0.7486],
            [-0.0382,  0.2181,  1.4504, -3.9251,  0.5436, -3.4902,  4.5613, -3.3001,
             -1.7653,  1.2831],
            [ 1.2100,  1.7031,  0.4127, -2.1353, -6.0619, 11.9653, -1.5065,  0.4080,
              5.1878, -3.2538],
            [ 1.0672,  2.1986, -1.8093, -2.7052, -1.9465, -1.4335,  0.4714,  1.9769,
             -4.5728,  2.5594],
            [ 0.2662,  0.8584, -0.6430, -3.1132, -0.5491,  2.4261, -0.2194,  0.8495,
              1.2739, -1.3447]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.076 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
