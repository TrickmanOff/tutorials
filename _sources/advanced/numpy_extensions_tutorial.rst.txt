
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 7.7138,  3.7324,  6.5049, 11.0027,  6.0243],
            [ 3.8422,  2.7786,  5.2860,  7.4517,  8.1469],
            [ 4.9733,  4.5619,  6.8784, 17.8290,  1.7585],
            [ 4.6012, 11.0763,  5.1677,  6.7052, 13.9425],
            [ 3.3763,  8.2806, 12.8763,  2.0792, 15.9398],
            [ 4.6012, 15.4361,  6.8273,  2.0868, 13.9425],
            [ 4.9733,  7.3849,  6.8444, 10.7111,  1.7585],
            [ 3.8422,  6.1936,  7.7643,  6.0578,  8.1469]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0981, -1.1471, -0.3270,  1.2886,  2.0332, -0.9727, -0.3528,  0.1160],
            [ 0.0073,  0.2999,  1.1916, -1.8093,  0.1659,  0.2626,  0.4572,  0.2684],
            [-0.1547, -0.1306, -0.0093, -0.0459,  0.2723,  0.2527, -1.8144,  2.2028],
            [ 0.8567, -0.4423,  0.1395,  0.3358,  1.2959, -0.2207, -0.1815, -0.9553],
            [ 1.2564,  0.1561, -2.4724,  0.9925, -1.1477,  1.4136, -0.9077,  1.6545],
            [ 0.1531,  0.5524,  2.1063, -0.8460,  0.1993, -0.0245, -0.9504,  1.2851],
            [-1.9683,  1.2440,  1.8672,  0.5882,  1.8756,  0.1471, -0.9669,  0.5037],
            [-0.0650,  1.1782, -0.8912, -0.4700, -1.6969, -0.8570,  0.7754,  0.0481]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8055, -1.0173, -0.0312],
            [ 1.6473, -1.1421,  1.5471],
            [ 1.1707,  0.6887,  0.4174]], requires_grad=True), Parameter containing:
    tensor([[-1.0561]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8313, -0.1010,  3.3559, -6.1486, -3.9021,  3.8009, -2.7637,  0.6718],
            [-1.8965, -0.8237,  1.3893,  0.2678, -4.8959, -1.6958, -3.9936,  0.9302],
            [-1.1002,  0.2362,  1.0461, -0.3522, -3.0274, -0.8197,  0.6416,  1.3147],
            [-1.0571,  5.5229, -2.2389,  4.2639,  0.7407, -2.3563,  3.2128, -3.6753],
            [-0.5965,  1.2406, -0.4868,  3.2883, -0.8385, -5.6547, -0.8006, -7.0615],
            [-2.9044, -1.5221,  1.4750, -1.8941, -0.2768, -2.8396, -0.2589,  1.7587],
            [ 2.0228, -4.3189, -1.4429,  4.4926, -0.7948,  3.2042,  0.0864,  2.2105],
            [-4.7923,  2.3535,  1.5889,  0.5559, -0.9309,  2.3958, -6.6193,  3.6759]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1776,  0.7234, -1.3946,  1.3767, -1.0984, -0.9711,  0.4604,  2.0201,
             -2.3716, -0.0729],
            [ 0.4544,  0.5047, -0.4640,  5.0942, -1.1166,  0.9973,  0.0642,  4.6971,
             -3.9811,  3.5772],
            [ 2.0752, -2.5309, -0.2083,  0.6451,  2.7843,  1.3477, -1.8281,  6.3463,
             -1.3612,  2.7062],
            [ 4.0539, -3.5405, -1.9364, -1.1634, -0.8446, -2.3875,  0.2938,  2.0648,
             -0.1181,  1.3561],
            [ 4.5710,  2.0743, -2.7911, -1.5255, -1.8277, -2.2416,  1.2688, -1.9527,
             -0.2644,  0.1368],
            [ 2.5587,  2.9622, -1.4750,  4.5623,  3.5907, -2.8603,  4.7024, -0.3244,
              1.1000,  1.2825],
            [ 1.5077,  1.8554, -0.8693,  1.1889, -0.2056, -1.8180,  9.4084, -0.9651,
              2.6864,  0.8411],
            [-0.1569,  0.0903, -1.5104,  0.5703, -1.0981,  2.3527,  2.0546,  1.3112,
              3.5263,  0.7548],
            [-1.3551,  3.6749, -3.7470,  4.7668,  0.1578,  2.3891, -2.6601,  4.1055,
             -1.6006, -0.8680],
            [-1.7387,  0.0896, -0.7515,  0.2450, -0.0657,  1.1366, -1.8731, -1.8772,
             -1.3414, -0.2778]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.028 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
