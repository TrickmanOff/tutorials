
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.5233, 11.6999,  3.9663,  3.3049,  0.8615],
            [ 7.4430,  8.6126,  3.2084,  0.8975,  5.4082],
            [ 3.2812, 12.3037, 11.6924,  7.2352,  8.6499],
            [ 2.6607,  5.0519, 14.3581,  8.8809,  8.6093],
            [ 0.9908,  6.6265,  3.6408, 11.2188,  5.8232],
            [ 2.6607,  6.6151,  5.5654,  1.8670,  8.6093],
            [ 3.2812,  4.8606, 17.0389,  8.4985,  8.6499],
            [ 7.4430,  4.6187,  2.8276,  7.0598,  5.4082]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7709, -0.9108, -1.4608,  0.4608,  0.9530,  0.1790, -0.5043,  0.6942],
            [-1.2324, -0.6746, -0.4383, -0.6806,  1.7865,  1.4421,  1.3280,  0.4307],
            [-0.7131,  0.3979,  1.4786, -0.2573,  1.1280,  0.7400,  1.0238, -0.9850],
            [-0.7527,  0.5273, -1.0424,  2.2333, -0.3759,  0.9031,  0.6154,  0.6060],
            [ 0.0342,  0.7714,  0.5907, -0.8423,  0.5603,  0.1802, -1.3665, -0.0456],
            [ 0.7627, -1.2924, -1.5009,  0.2697,  1.4353,  0.4624, -0.7065, -0.7534],
            [-1.0579, -0.2912,  2.0686, -0.1878, -0.8844,  0.5914,  0.6786, -0.5374],
            [-0.5476,  1.3208,  0.1103,  0.5850, -0.9503, -1.3181,  1.4016, -1.6877]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0350, -1.1815,  1.6373],
            [-2.2462,  1.2105,  0.0819],
            [ 0.0058, -1.2017, -0.3108]], requires_grad=True), Parameter containing:
    tensor([[-0.9136]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.8730,  4.4421, -2.2192, -0.5528,  1.5062, -3.2653,  1.2295, -1.0286],
            [-4.5704,  8.6292, -1.2051, -0.6269,  2.6699,  1.4465, -0.6737, -2.3955],
            [ 8.3738, -1.9287, -8.2526,  7.8419, -1.4610,  1.3849, -1.6507, -0.3984],
            [-0.9323, -0.2212,  4.2358, -5.6320,  0.6947,  4.3707, -3.7531, -1.7457],
            [ 2.9394, -1.5508, -5.9696, -0.0279,  0.2225, -1.6822,  3.3293,  0.4405],
            [ 1.7656, -2.8936,  3.0095, -2.5920,  2.5790, -4.1004, -0.5293,  6.0771],
            [-1.4200,  2.7217, -2.2378,  0.9023, -2.4701,  6.1871, -3.9020,  3.5721],
            [ 5.6917, -0.4961, -4.1523, -1.6033,  3.6903, -8.2320, -4.6362,  7.5861]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.3909e-02,  1.4793e+00, -2.0590e+00,  1.4832e+00, -1.8829e+00,
              9.6896e-01, -2.2980e+00, -1.9764e-01, -1.5439e+00,  3.8019e+00],
            [ 2.8117e+00, -1.3427e+00,  2.4321e+00, -5.5663e-01, -7.7749e-01,
              1.0863e+00, -1.2017e-02, -5.2443e+00,  4.6979e+00, -1.3333e+00],
            [ 1.4669e-01,  1.8158e+00, -5.2753e-01, -3.5308e+00,  2.8656e+00,
              2.1759e+00, -1.6058e+00, -2.3291e-01, -2.9843e+00, -6.7904e-01],
            [ 1.6074e+00, -9.2811e-01, -2.2668e+00,  5.4617e+00, -1.7964e+00,
             -1.9824e+00, -2.7112e+00,  2.8315e+00, -1.4921e+00,  8.7171e-01],
            [-1.2992e-01, -4.3372e+00,  3.6009e+00,  1.5950e-01,  1.3011e+00,
             -3.2967e+00,  5.4111e+00, -2.7360e+00,  7.9659e-01,  1.1396e-01],
            [ 5.2992e-01,  3.5246e+00, -3.9476e+00,  3.9037e-01, -4.3402e+00,
             -1.2852e+00, -4.3221e-01,  2.3673e+00, -8.6977e-01,  2.7767e-01],
            [ 2.4966e+00,  5.8908e-01,  4.9450e+00, -1.0781e+00, -3.9145e+00,
              2.8926e+00,  3.4785e+00, -4.5713e+00,  3.4297e-01,  1.4159e+00],
            [-2.6672e+00,  5.0216e+00,  2.1951e+00, -2.9771e+00, -5.6156e-01,
             -9.7210e-01,  1.0912e+00,  1.9245e-01,  1.3356e+00, -8.4147e-01],
            [-8.3206e-01, -2.6165e+00,  4.9586e+00,  1.8091e+00, -1.0375e+01,
              1.1373e-01,  1.7896e+00,  3.3233e-01, -1.9321e+00, -3.1103e-01],
            [ 2.1656e-03, -4.4463e-01, -9.9643e-01,  1.3659e+00,  1.4841e+00,
             -3.0677e+00, -1.2390e+00,  7.7735e-02,  6.6231e-01,  1.5943e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.046 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
