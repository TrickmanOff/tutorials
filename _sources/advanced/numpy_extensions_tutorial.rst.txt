
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.7737,  0.8754,  9.2086,  3.5469, 10.9771],
            [ 3.7487,  5.5112,  6.3826,  8.2411, 12.3284],
            [11.8599,  0.9835,  8.9089,  8.3617,  2.5250],
            [ 6.0458, 10.0725, 14.3269,  8.0080,  4.7680],
            [ 1.3335,  9.0280,  3.9523,  7.6544,  7.6588],
            [ 6.0458, 10.2624,  2.6015,  9.5158,  4.7680],
            [11.8599,  1.1818,  4.7643,  7.1204,  2.5250],
            [ 3.7487, 11.6993, 18.2733,  9.0653, 12.3284]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4834,  1.6652,  0.8135, -0.5592,  1.1125,  0.4438, -0.3537, -1.1398],
            [ 2.3914, -0.3345, -0.4980, -1.3166, -0.4127,  0.3478,  0.5814, -1.0450],
            [-1.6760, -0.0431,  0.3024, -0.3486, -0.0842, -0.6973,  0.3987, -1.9931],
            [-1.4410,  0.8215,  1.7236, -1.2757,  1.4007, -1.2630,  1.4012, -1.2150],
            [-0.8437, -1.0032, -0.4454,  1.3250,  0.1891, -0.0475,  1.9120,  0.4068],
            [-0.0114,  0.1487,  0.8445,  1.3658, -0.6782,  0.3400,  0.7822, -0.3313],
            [-0.8966, -0.9870, -0.9037,  0.1525,  0.1177, -0.8431, -0.5734,  1.5624],
            [ 0.3148, -1.7237,  0.4566, -0.3548, -2.7638, -0.7369, -0.0424,  1.3035]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3862,  0.0157, -0.3717],
            [-1.0213, -0.8431,  1.3052],
            [-0.5716,  0.2671, -1.0621]], requires_grad=True), Parameter containing:
    tensor([[-0.8177]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.6989, -0.1664, -0.5908, -5.0141, -2.8151, -1.7476,  1.1556,  0.6526],
            [-2.1309,  0.1916, -2.2985,  1.7690, -2.2949, -4.3638,  0.1216,  1.5254],
            [-1.0996, -1.9364,  0.7358, -0.2046, -1.5505, -3.6428, -0.6112,  0.8984],
            [-4.6240, -0.4717, -0.6695, -1.3691, -0.9625, -0.4709,  0.4789, -2.2012],
            [ 1.3278,  1.2421,  0.1849, -1.3251, -3.0621, -0.8463, -3.2301, -1.4294],
            [-1.5272,  0.2658,  1.2745, -5.3652,  2.2233, -2.3515,  1.3560, -4.3113],
            [ 2.1051, -1.7856, -0.6326, -0.2604, -1.9124, -0.9946, -2.2198,  3.2783],
            [-1.2432,  7.1055,  0.2476, -5.1129,  3.1012, -4.3715,  2.1328, -0.8575]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.7430e-02, -3.0321e-01,  3.9638e-01, -7.3037e-01,  7.1282e-01,
             -3.5290e-01, -2.9113e-01,  5.3136e-01, -6.6272e-01,  4.1461e-01],
            [-4.6687e-01, -7.6597e-01, -9.7888e-01,  6.0036e-01, -1.1022e+00,
              2.4225e+00, -2.4298e+00, -1.1444e+00,  3.6408e+00, -1.7183e+00],
            [-2.1499e+00, -2.8810e+00,  1.0691e+00, -2.1755e+00,  2.7771e+00,
             -2.2648e+00,  6.8871e-01,  3.2711e+00, -4.0285e+00,  1.9758e+00],
            [-2.4634e+00, -2.3027e+00, -3.2417e+00, -1.2087e+00,  9.6444e-01,
              5.6043e+00,  3.2191e+00, -3.8498e+00,  2.7162e-01,  1.6078e-01],
            [-1.3283e+00, -1.1763e+00, -8.4944e-01, -4.2684e-01,  1.2334e+00,
              1.0621e-01, -2.2175e-01,  2.3815e+00,  2.7388e+00, -1.7730e+00],
            [ 1.4908e-01, -8.9659e-01,  3.4776e+00,  1.2677e+00, -1.7660e+00,
              1.6098e+00,  8.7935e-01,  3.6503e+00, -2.8745e+00,  8.5921e-01],
            [ 2.3907e+00,  5.0006e-01, -1.4134e+00,  3.0452e+00,  2.3363e-01,
             -2.1603e+00,  8.3047e-01, -8.4943e-01,  3.8627e+00, -7.0813e-01],
            [ 2.9756e+00,  1.8740e-01,  1.9284e+00, -1.9223e+00,  1.7090e+00,
              1.6275e+00, -2.5607e+00, -7.5646e-01, -2.9437e+00,  2.5847e+00],
            [ 1.8069e+00,  9.4819e-01,  2.3763e+00,  8.8916e-01, -4.3962e+00,
              5.6433e-01, -3.3776e-01, -7.6493e-01,  2.7719e+00, -2.6161e+00],
            [ 5.5428e-01, -2.3070e-03,  2.0860e+00, -3.3956e-01,  1.8960e+00,
             -7.9784e-02, -1.6623e+00,  1.3830e+00, -1.7466e+00,  1.1148e+00]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.307 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
