
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 7.5615,  5.4137,  6.4007,  5.6551, 16.2524],
            [ 8.9064,  4.0374,  7.1224, 14.2508, 12.2778],
            [ 4.7937,  4.8584,  3.6457,  3.7819, 15.2115],
            [ 2.8736, 12.5127,  3.6175,  7.2950,  0.8114],
            [ 0.3748,  2.6738, 11.8102, 10.3283, 14.0379],
            [ 2.8736,  5.7803,  4.3374,  5.0772,  0.8114],
            [ 4.7937,  9.6607,  5.3120,  3.8063, 15.2115],
            [ 8.9064,  6.9175,  2.7305,  9.9410, 12.2778]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.8050,  1.0785,  0.1111, -1.0630,  0.2546,  0.1050,  0.1567, -0.7369],
            [-0.2113, -0.5203, -0.4297,  0.9888, -0.9546, -1.1118, -0.9569,  0.5701],
            [-2.1557,  0.1122, -0.8428,  0.6880, -0.3291,  0.2348, -0.1195,  0.1787],
            [ 1.3374, -1.8531,  0.7512,  0.5126, -2.1351,  0.3641, -0.4455, -0.6215],
            [-0.6125,  0.2494, -0.4070, -0.0796, -1.9185,  2.4543, -0.5959,  0.7501],
            [-0.0597,  1.3651,  0.5284,  1.8275, -1.0526,  0.9378, -0.6437,  0.3219],
            [-0.5077,  1.0329,  0.6368, -0.1871, -0.4087,  0.4307, -1.0135,  0.3406],
            [-0.7271, -2.1347, -0.2962, -0.4063,  2.1498, -0.2347,  0.7954, -1.2488]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.8580, -0.6659, -0.9037],
            [-0.5029, -0.8438,  0.6059],
            [-0.6373,  0.5612, -1.2230]], requires_grad=True), Parameter containing:
    tensor([[0.1105]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.0505, -0.1363, -3.0681, -1.5359,  2.9775,  2.8514,  0.6237, -0.2616],
            [-4.0930, -0.6798,  0.3743,  0.6653,  1.3687,  5.9417,  0.3712,  1.6502],
            [-2.6279, -2.5261,  0.6048, -0.7322,  2.3700, -1.5072,  2.1349,  0.9049],
            [-3.8514, -1.0063, -3.5142,  1.4355,  0.2856,  5.5035,  1.1858,  5.2960],
            [ 6.0241,  1.4434,  5.3834, -1.3207,  5.8091, -0.0870,  3.9079, -0.1298],
            [-1.4204,  6.5715, -1.4156,  0.6020,  1.8142,  1.7264,  2.3032,  2.0358],
            [ 1.8542,  0.1943,  3.4406,  1.7288, -0.4959,  5.0033,  4.3710, -0.4470],
            [-0.8964,  0.8638, -3.4217,  3.1309,  7.5674,  0.5278,  4.1943, -4.8846]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.1840e+00, -1.6725e+00,  1.1866e+00,  3.4548e+00,  7.6563e-03,
             -2.9845e+00, -2.9969e+00, -2.6547e+00, -5.3297e-01, -3.3719e-01],
            [ 6.8444e-01, -1.0620e+00,  8.5247e-01,  5.6136e+00,  2.3750e+00,
              1.9008e+00,  2.0841e+00,  7.1134e-01, -3.5713e-02, -6.4181e-01],
            [-1.8660e+00,  7.2884e-01, -2.9068e+00,  3.0006e+00, -1.3060e+00,
              7.1401e-01, -2.7083e+00, -2.5306e+00, -1.4803e+00,  7.3438e-01],
            [ 2.2558e-01,  2.1010e+00,  1.6186e+00, -2.0793e+00, -1.5859e+00,
             -3.6878e-01, -3.0765e-01, -2.3026e+00,  2.6572e-02, -3.0099e+00],
            [-1.1185e+00,  1.4956e+00,  1.3520e+00,  1.9355e+00, -1.9760e+00,
              8.6163e+00, -3.6013e+00, -4.9265e+00, -3.4191e+00,  4.0011e-01],
            [-1.8649e+00, -1.9023e+00,  2.2708e+00,  3.9393e+00,  4.1439e+00,
              6.5114e-01, -3.3018e+00, -1.9465e+00, -3.2501e+00, -1.2754e+00],
            [ 1.4572e+00,  8.5075e-01,  5.5073e-01,  3.1409e+00,  1.5977e+00,
              2.7552e+00,  2.4970e+00, -1.6174e-01,  1.2557e+00, -1.4711e+00],
            [ 1.8983e+00,  1.2076e+00, -5.0769e-01, -4.5714e+00,  5.3225e+00,
              5.4583e+00,  1.3105e+00,  2.4087e+00, -2.2658e+00, -1.4455e+00],
            [ 1.2584e+00,  4.4599e-01, -8.0736e-01,  7.0963e-01,  4.9638e-01,
              1.5602e+00,  1.9764e+00, -6.4504e-01, -3.6659e-01,  9.2022e-01],
            [ 6.5629e-01, -7.8218e-01,  9.6222e-01, -1.7786e-01,  2.8974e-01,
             -6.8871e-01,  1.8632e+00,  1.2541e-01,  1.4136e+00, -1.2659e+00]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.015 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
