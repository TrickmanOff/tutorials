
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.5476,  7.0819,  6.0050,  9.1975, 13.6744],
            [ 1.4191,  4.1093,  8.1046, 10.2621,  2.5906],
            [ 4.0093,  7.9222,  8.7694,  2.5069,  8.9513],
            [ 4.5046,  6.3615,  8.4513,  3.3132,  3.0982],
            [ 3.0749, 15.6409,  7.1150,  2.5318,  9.1990],
            [ 4.5046,  4.2490,  0.3224,  9.1014,  3.0982],
            [ 4.0093,  5.0552, 11.4813,  8.4735,  8.9513],
            [ 1.4191,  7.1419,  1.5897,  8.2133,  2.5906]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.1994,  1.0989, -0.0456, -0.5144,  0.8580, -2.6657,  0.3475, -0.3016],
            [-1.5847,  0.0592,  0.2332, -0.6143, -0.0230, -0.6824,  0.0682, -0.1678],
            [ 1.4250, -0.0775,  0.1274,  0.3026,  0.2658, -0.5700, -0.9430,  0.2455],
            [ 0.7405, -0.3587,  0.5756,  0.7658,  1.6103, -0.3904, -1.1826, -0.7998],
            [ 0.9792, -1.4685,  1.1409, -1.6566, -0.3641,  0.0172, -0.0334,  0.7821],
            [-1.0180, -0.0801,  0.6175, -0.8515, -0.4395,  0.2292,  0.0793,  0.7789],
            [ 0.3298, -0.7957,  0.7719, -1.1324, -0.7592, -0.3992, -0.4492,  1.5488],
            [ 0.3509, -0.0305, -0.1252, -0.1098,  1.1175,  1.3036, -1.3069, -1.5759]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.3447, -0.0831, -0.2808],
            [-0.1063,  0.5561,  0.4796],
            [-1.5119, -0.8921,  0.5300]], requires_grad=True), Parameter containing:
    tensor([[1.3922]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.6246,  4.6751,  4.8350,  2.6359, -1.4118, -1.9280, -0.6210, -1.5148],
            [-1.8971, -1.3603,  0.4687,  1.6032,  2.5515, -0.7603, -0.4514,  5.0303],
            [ 1.0118,  2.3257, -1.2107, -3.9993,  2.5829,  3.9889,  5.1490,  6.0029],
            [ 0.6797,  5.5083,  4.9524, -1.3811,  0.1027,  4.3003,  2.5907,  1.4655],
            [ 0.4732, -4.7992, -0.2726,  6.7446,  2.9695, -0.3474,  1.9804, -0.1016],
            [ 5.9991,  4.7838, -3.5136,  0.1884,  2.6250, -2.5972, -1.8302, -0.4655],
            [ 0.8184,  1.2659,  4.4608, -1.4890, -2.1202,  3.3347,  5.7032,  3.3920],
            [-0.6091, -1.8360, -0.2396,  1.1316,  1.1160, -1.1417, -0.8216,  1.8332]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8368,  1.7082,  0.9486, -0.1683, -3.4143, -0.0470,  2.4218, -0.5240,
             -0.3346,  0.0956],
            [-0.7092,  0.1606, -0.2223,  0.5479,  1.5157, -2.4932, -0.8985, -1.1352,
              0.4461,  0.2657],
            [ 1.3411, -0.6434, -0.1733,  2.0479,  2.9575,  3.2013, -3.2178,  3.0939,
              0.0104, -1.7735],
            [ 1.5925,  1.3637, -1.1476,  1.5538,  0.6924,  4.5175,  0.5709,  1.1450,
              3.4724,  0.6524],
            [-2.5895, -2.0841, -3.3029, -5.0482, -1.4189, -0.4829,  2.0075, -4.9733,
             -3.1082,  1.8737],
            [ 0.5460, -1.9210, -1.6980,  1.2650, -2.1128, -3.7302,  0.5492,  2.4061,
             -0.3139, -0.4207],
            [ 0.9676,  0.7897,  4.6338,  3.5621, -1.3807, -0.3970, -3.5562, -1.0343,
              2.4246, -0.1092],
            [-1.7533, -0.2072,  0.1352,  1.5388,  1.3506,  1.3193, -1.0838,  1.0350,
             -0.4422, -0.9356],
            [ 1.5597,  3.0535, -0.1558, -2.3241,  2.3262,  0.7282, -1.1928,  2.2793,
              2.2222,  0.3141],
            [ 0.5535, -2.1931, -2.5334, -1.4530,  0.0830,  1.4014, -1.5079, -3.5831,
             -1.1193,  0.9462]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.002 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
