
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[17.6648,  8.0387, 15.0381,  3.1148,  6.5199],
            [ 4.9784, 10.0490,  3.6177,  2.8695,  7.5271],
            [ 8.3165,  5.0595,  7.7749,  6.2759,  4.1917],
            [12.8493,  8.6566,  4.9538,  6.8896,  1.7364],
            [ 5.9127,  6.9609,  1.6593,  7.6371,  4.4060],
            [12.8493,  2.2147,  8.9032,  5.3839,  1.7364],
            [ 8.3165,  8.9943,  2.0709,  5.3485,  4.1917],
            [ 4.9784,  4.0269,  5.6481,  8.5872,  7.5271]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4058,  0.8868,  1.6587, -1.2448, -1.5943,  0.4612, -0.1281,  1.1274],
            [ 0.2856,  1.6856,  0.1237, -0.5251, -0.0432, -0.4336,  0.9899,  0.1175],
            [ 0.0383, -2.0906,  0.9878, -0.5138, -0.4592,  0.3363,  1.4503,  0.8983],
            [ 0.9272, -0.5466,  0.7327,  0.5886, -0.6789, -0.4734,  0.4426, -0.7933],
            [ 1.8079,  0.9183,  0.9200,  0.0976, -0.3461,  0.9338,  1.4798,  0.3491],
            [-1.5196, -0.2582,  0.4844,  0.6147, -0.2296, -0.6934, -0.4222, -0.9682],
            [ 0.2001,  0.8573,  0.7690,  0.2713,  0.8907, -0.1402,  0.5453,  0.0146],
            [-0.1495,  1.1967,  1.6368,  0.7701, -0.9669,  0.9308,  1.8536,  1.1973]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0927,  0.6495, -1.2288],
            [-1.8074,  1.2792,  1.2258],
            [-2.1302,  0.1053, -0.2230]], requires_grad=True), Parameter containing:
    tensor([[0.2601]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.8734e+00, -3.2542e+00, -1.6820e+00,  1.4941e-02, -6.1618e-01,
             -3.6091e+00,  3.1280e-01, -4.0501e+00],
            [-1.3452e+00,  4.0357e+00, -3.9317e+00, -2.2816e+00,  2.5715e+00,
              4.8081e+00,  2.5266e+00, -1.7146e+00],
            [ 4.3920e+00,  4.9736e+00, -8.6744e-01, -2.2705e+00, -7.5953e+00,
              9.4858e+00, -5.0241e+00,  2.9840e+00],
            [ 2.5481e-01,  9.5608e-01,  1.8509e+00,  5.6006e+00, -5.5992e+00,
              2.8482e+00, -1.3067e-01,  6.7776e-01],
            [-5.4469e-01,  1.3406e+00, -2.2928e+00,  2.3626e+00, -1.9347e+00,
             -3.4712e-01,  1.7178e-01, -9.2713e-02],
            [ 1.1869e+00, -4.8129e-01,  2.9516e+00, -4.3114e-03,  4.0652e+00,
             -3.0016e-01,  3.7389e+00,  1.4080e+00],
            [-1.7581e+00, -2.0170e-01,  1.5979e+00, -4.7770e+00,  4.3004e+00,
             -2.6607e+00,  1.9697e+00,  2.5766e+00],
            [ 4.8928e-01, -6.7887e-01,  6.6495e-04, -2.9265e+00,  3.7088e+00,
              2.5486e+00,  1.0063e+00, -3.4600e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0137,  0.0245, -0.6084,  1.5751, -0.2527, -1.0173, -0.3499, -0.5201,
              0.3972, -0.2130],
            [-0.2810,  1.4342, -2.6898, -2.6105,  4.1649,  1.1556,  2.6817, -1.7729,
             -0.2498,  2.2328],
            [ 0.0275,  3.1046,  0.3730, -4.7812, -3.6237, -1.0825, -1.7117,  3.3698,
             -4.8151, -2.7391],
            [-1.1879,  2.3396,  4.7307,  2.6223, -5.3481,  1.0530,  2.9107,  5.1001,
              2.9493,  2.4156],
            [-1.8016, -0.8683, -5.8466,  5.5574, -5.3868,  0.9019, -4.3119, -2.1061,
             -2.6931,  1.5899],
            [-0.3667,  0.5234, -6.9644,  0.6636,  2.1172, -2.8273,  7.6640,  4.4892,
             -4.4260, -1.1381],
            [ 0.9235,  1.9590, -3.8529,  1.9801,  1.7184, -5.8739,  3.1921,  7.1321,
             -3.2856, -1.4164],
            [-1.1770,  2.0919, -0.5160,  3.1967,  6.0088, -2.9498,  1.2996,  3.4470,
              1.1485, -0.4629],
            [-3.4867,  2.5405, -7.0195,  2.8192,  1.2028, -1.9991, -0.5304, -1.3726,
              1.4061,  1.0070],
            [-0.6346,  1.5928, -3.4974,  1.6867, -1.3447, -0.4602, -0.7360, -1.8778,
              0.0208, -0.1929]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.159 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
