
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.6007,  0.7623,  7.9701,  7.7667,  9.2258],
            [ 7.2976,  0.2868, 12.3788,  0.7279,  5.3423],
            [ 7.4874,  3.2959,  7.5859,  6.1882, 13.6951],
            [10.5709,  9.9755, 10.0942,  7.7039, 13.0889],
            [13.4957, 11.9680,  6.2145,  8.0035,  0.9368],
            [10.5709,  7.4548,  4.3362, 10.4113, 13.0889],
            [ 7.4874,  5.6244,  3.1676, 10.2049, 13.6951],
            [ 7.2976,  5.8600,  4.1702,  3.9775,  5.3423]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2578, -0.0137, -0.0191, -0.0338, -0.3481,  1.5065,  0.3998, -0.3752],
            [-1.3425, -0.6994,  0.5630, -1.1075, -2.0384, -1.4744, -0.4857, -0.8784],
            [ 2.7033,  0.1031,  0.4162, -1.1238,  0.3112,  0.7266,  1.3550, -1.9346],
            [-0.9557,  1.5686, -1.5335,  0.9052,  1.0633, -0.1753, -1.2435, -0.7259],
            [-0.0745,  0.1490,  0.0496,  0.7250,  0.5299,  1.7927,  0.0097,  0.3285],
            [ 2.2925,  0.1790, -0.3973, -0.6653, -0.9724, -0.0124,  1.0288, -1.3768],
            [-0.5801, -0.8589, -0.5892, -0.3144,  1.4279, -0.0907, -0.0694, -0.4032],
            [ 0.4043,  0.4315,  0.4568, -0.1336, -0.2315, -2.1135,  1.4399,  0.1819]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6053,  1.1582, -0.2115],
            [-3.0687,  1.0104,  0.1622],
            [ 0.1177, -0.7235, -0.4994]], requires_grad=True), Parameter containing:
    tensor([[2.9513]], requires_grad=True)]
    Output from the convolution:  tensor([[ 7.7489, -5.5379,  6.2648,  0.0354,  7.5371,  0.1703,  2.6881,  1.5818],
            [ 2.0821,  1.9002,  8.4372,  1.6811, -3.8934, 10.8757, -1.3671,  4.7247],
            [ 5.3435,  5.3593, -3.4850, 12.7884,  1.5075,  0.4795,  7.1950, -0.2263],
            [ 2.8543,  4.8623,  1.2528,  3.7734,  4.8882,  0.0475,  3.4920,  2.7639],
            [ 1.0036,  3.0050,  2.8564, -2.1740,  5.0951,  7.1516,  3.6499,  2.9271],
            [-4.3428,  0.1507,  4.2518,  6.3271, -6.6232,  3.3681, -1.0672,  2.0580],
            [ 4.4584, -0.0886, -0.6997,  4.4723,  3.9206,  7.3869, -1.1997, -5.3555],
            [ 2.8744,  3.8849,  5.3909, -0.5992,  2.3923,  1.8868, 10.8652, -4.9323]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1024,  0.1407, -0.5905, -0.8287,  0.2566,  0.1680, -0.2058, -0.7994,
             -0.6202,  0.1275],
            [-1.0347, -1.0764,  1.2705, -0.0715,  0.4078, -1.4434, -0.4940, -1.4866,
             -0.4793, -0.0368],
            [ 3.1915,  3.5394, -0.0737, -4.5693,  5.0027,  0.9404,  7.6436, -2.2029,
             -0.1367,  0.2814],
            [-2.3810, -0.5873,  6.7426, -0.5606, -2.1217, -2.6306,  3.7078,  1.1972,
              0.6221,  0.2465],
            [-2.6765, -3.1505, -1.9296,  2.7617,  3.9323, -4.6559,  0.0887,  1.6026,
             -0.7276,  0.0382],
            [-0.2239,  0.0110, -4.4058, -0.7309,  0.4884,  3.7939, -0.1867,  0.6868,
              1.1443,  0.0751],
            [ 2.0492, -2.1231, -2.1796, -2.4651, -2.3907, -3.1878,  0.9844, -1.9015,
             -1.2475,  0.6576],
            [ 3.7956,  1.0392,  1.8041,  1.8862, -3.7704,  2.7941, -4.8443,  4.5741,
             -3.8699, -0.3417],
            [-7.7846,  2.8271,  1.3933,  0.8457,  1.4403,  0.3764,  1.3292,  4.1554,
             -0.7942,  0.6206],
            [ 0.2952, -1.8011, -1.3678,  0.1276,  0.4156,  0.3458,  0.1836,  0.0771,
              1.2562,  0.7761]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.009 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
