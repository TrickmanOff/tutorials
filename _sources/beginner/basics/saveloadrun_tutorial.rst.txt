
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(pretrained=True)
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning:

    The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning:

    Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      1%|1         | 6.49M/528M [00:00<00:08, 68.1MB/s]
      3%|3         | 17.2M/528M [00:00<00:05, 94.2MB/s]
      5%|5         | 28.1M/528M [00:00<00:05, 100MB/s] 
      7%|7         | 38.9M/528M [00:00<00:04, 105MB/s]
      9%|9         | 48.9M/528M [00:00<00:05, 95.3MB/s]
     11%|#1        | 58.1M/528M [00:00<00:05, 94.3MB/s]
     13%|#2        | 67.2M/528M [00:00<00:05, 87.1MB/s]
     14%|#4        | 75.6M/528M [00:00<00:05, 81.1MB/s]
     16%|#5        | 83.5M/528M [00:01<00:06, 73.1MB/s]
     17%|#7        | 91.5M/528M [00:01<00:06, 75.6MB/s]
     19%|#9        | 101M/528M [00:01<00:05, 83.2MB/s] 
     21%|##1       | 111M/528M [00:01<00:04, 87.9MB/s]
     24%|##3       | 125M/528M [00:01<00:03, 106MB/s] 
     26%|##5       | 136M/528M [00:01<00:04, 86.6MB/s]
     27%|##7       | 145M/528M [00:01<00:05, 77.6MB/s]
     31%|###       | 163M/528M [00:01<00:03, 104MB/s] 
     33%|###3      | 174M/528M [00:01<00:03, 108MB/s]
     35%|###5      | 185M/528M [00:02<00:03, 102MB/s]
     37%|###7      | 196M/528M [00:02<00:03, 98.7MB/s]
     39%|###8      | 206M/528M [00:02<00:05, 61.8MB/s]
     40%|####      | 214M/528M [00:02<00:05, 65.7MB/s]
     42%|####1     | 222M/528M [00:02<00:05, 61.9MB/s]
     43%|####3     | 228M/528M [00:02<00:04, 63.3MB/s]
     45%|####4     | 235M/528M [00:03<00:04, 62.6MB/s]
     48%|####7     | 251M/528M [00:03<00:03, 86.7MB/s]
     50%|####9     | 262M/528M [00:03<00:03, 90.2MB/s]
     51%|#####1    | 271M/528M [00:03<00:03, 69.3MB/s]
     54%|#####3    | 284M/528M [00:03<00:03, 82.3MB/s]
     55%|#####5    | 293M/528M [00:03<00:02, 84.8MB/s]
     58%|#####7    | 304M/528M [00:03<00:02, 92.8MB/s]
     59%|#####9    | 313M/528M [00:03<00:02, 94.3MB/s]
     62%|######1   | 325M/528M [00:03<00:02, 103MB/s] 
     64%|######3   | 337M/528M [00:04<00:01, 108MB/s]
     66%|######5   | 348M/528M [00:04<00:01, 104MB/s]
     68%|######7   | 358M/528M [00:04<00:02, 83.1MB/s]
     71%|#######   | 373M/528M [00:04<00:01, 102MB/s] 
     73%|#######2  | 384M/528M [00:04<00:01, 77.4MB/s]
     74%|#######4  | 392M/528M [00:04<00:02, 68.1MB/s]
     76%|#######5  | 400M/528M [00:05<00:01, 71.1MB/s]
     78%|#######8  | 412M/528M [00:05<00:01, 82.4MB/s]
     80%|#######9  | 421M/528M [00:05<00:01, 84.9MB/s]
     82%|########1 | 432M/528M [00:05<00:01, 91.8MB/s]
     84%|########3 | 441M/528M [00:05<00:00, 92.8MB/s]
     85%|########5 | 450M/528M [00:05<00:00, 86.5MB/s]
     87%|########7 | 460M/528M [00:05<00:00, 89.2MB/s]
     89%|########8 | 469M/528M [00:05<00:00, 68.8MB/s]
     91%|#########1| 482M/528M [00:05<00:00, 86.1MB/s]
     94%|#########4| 498M/528M [00:06<00:00, 106MB/s] 
     97%|#########6| 510M/528M [00:06<00:00, 109MB/s]
     99%|#########8| 521M/528M [00:06<00:00, 94.8MB/s]
    100%|##########| 528M/528M [00:06<00:00, 86.6MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify pretrained=True, i.e. do not load default weights
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.317 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
