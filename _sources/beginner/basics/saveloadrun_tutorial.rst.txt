
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(pretrained=True)
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning:

    The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning:

    Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      0%|          | 2.44M/528M [00:00<00:21, 25.1MB/s]
      1%|          | 4.94M/528M [00:00<00:21, 25.7MB/s]
      1%|1         | 7.52M/528M [00:00<00:20, 26.3MB/s]
      2%|1         | 10.0M/528M [00:00<00:21, 25.1MB/s]
      2%|2         | 12.4M/528M [00:00<00:21, 25.0MB/s]
      3%|2         | 15.4M/528M [00:00<00:19, 26.9MB/s]
      4%|3         | 20.6M/528M [00:00<00:15, 33.5MB/s]
      5%|4         | 26.3M/528M [00:00<00:12, 40.9MB/s]
      6%|5         | 30.2M/528M [00:00<00:13, 38.8MB/s]
      7%|6         | 35.3M/528M [00:01<00:12, 43.0MB/s]
      8%|7         | 40.9M/528M [00:01<00:10, 47.8MB/s]
      9%|9         | 47.6M/528M [00:01<00:09, 54.2MB/s]
     10%|#         | 53.7M/528M [00:01<00:08, 57.1MB/s]
     11%|#1        | 59.2M/528M [00:01<00:09, 52.4MB/s]
     12%|#2        | 65.3M/528M [00:01<00:08, 55.5MB/s]
     13%|#3        | 70.7M/528M [00:01<00:09, 52.8MB/s]
     14%|#4        | 75.8M/528M [00:01<00:10, 46.9MB/s]
     15%|#5        | 80.5M/528M [00:01<00:10, 46.4MB/s]
     16%|#6        | 85.0M/528M [00:02<00:11, 41.9MB/s]
     17%|#6        | 89.1M/528M [00:02<00:12, 37.3MB/s]
     18%|#7        | 92.8M/528M [00:02<00:13, 33.6MB/s]
     18%|#8        | 96.1M/528M [00:02<00:16, 28.1MB/s]
     19%|#8        | 99.0M/528M [00:02<00:19, 23.5MB/s]
     19%|#9        | 102M/528M [00:02<00:17, 24.9MB/s] 
     20%|#9        | 105M/528M [00:02<00:16, 26.5MB/s]
     21%|##        | 110M/528M [00:03<00:13, 32.9MB/s]
     21%|##1       | 113M/528M [00:03<00:15, 27.4MB/s]
     22%|##2       | 117M/528M [00:03<00:14, 29.5MB/s]
     23%|##2       | 120M/528M [00:03<00:16, 26.0MB/s]
     23%|##3       | 123M/528M [00:03<00:16, 25.2MB/s]
     24%|##3       | 125M/528M [00:03<00:18, 22.5MB/s]
     24%|##4       | 129M/528M [00:03<00:16, 24.8MB/s]
     25%|##4       | 132M/528M [00:04<00:15, 27.2MB/s]
     26%|##5       | 135M/528M [00:04<00:14, 29.3MB/s]
     26%|##6       | 139M/528M [00:04<00:13, 30.9MB/s]
     27%|##7       | 144M/528M [00:04<00:10, 37.5MB/s]
     28%|##8       | 149M/528M [00:04<00:09, 41.1MB/s]
     29%|##8       | 153M/528M [00:04<00:10, 37.3MB/s]
     30%|##9       | 156M/528M [00:04<00:10, 37.5MB/s]
     30%|###       | 160M/528M [00:04<00:09, 38.6MB/s]
     31%|###1      | 166M/528M [00:04<00:08, 43.6MB/s]
     33%|###2      | 172M/528M [00:04<00:07, 49.6MB/s]
     34%|###3      | 177M/528M [00:05<00:07, 51.1MB/s]
     35%|###4      | 183M/528M [00:05<00:06, 53.8MB/s]
     36%|###5      | 188M/528M [00:05<00:06, 55.2MB/s]
     37%|###6      | 194M/528M [00:05<00:06, 55.3MB/s]
     38%|###7      | 200M/528M [00:05<00:06, 57.2MB/s]
     39%|###8      | 205M/528M [00:05<00:06, 55.9MB/s]
     40%|###9      | 211M/528M [00:05<00:05, 56.9MB/s]
     41%|####1     | 216M/528M [00:05<00:06, 49.6MB/s]
     42%|####2     | 223M/528M [00:05<00:05, 54.1MB/s]
     43%|####3     | 228M/528M [00:06<00:05, 55.7MB/s]
     44%|####4     | 234M/528M [00:06<00:06, 44.8MB/s]
     45%|####5     | 239M/528M [00:06<00:06, 47.5MB/s]
     46%|####6     | 244M/528M [00:06<00:06, 48.6MB/s]
     47%|####7     | 250M/528M [00:06<00:05, 51.7MB/s]
     49%|####8     | 256M/528M [00:06<00:05, 54.8MB/s]
     50%|####9     | 262M/528M [00:06<00:04, 57.6MB/s]
     51%|#####     | 268M/528M [00:06<00:04, 59.2MB/s]
     52%|#####2    | 275M/528M [00:06<00:04, 61.9MB/s]
     53%|#####3    | 281M/528M [00:07<00:04, 62.2MB/s]
     54%|#####4    | 287M/528M [00:07<00:04, 59.1MB/s]
     55%|#####5    | 292M/528M [00:07<00:05, 46.0MB/s]
     56%|#####6    | 297M/528M [00:07<00:05, 45.7MB/s]
     57%|#####7    | 302M/528M [00:07<00:05, 43.3MB/s]
     58%|#####8    | 306M/528M [00:07<00:05, 41.1MB/s]
     59%|#####9    | 312M/528M [00:07<00:04, 46.7MB/s]
     60%|######    | 318M/528M [00:07<00:04, 50.0MB/s]
     61%|######1   | 323M/528M [00:08<00:05, 40.2MB/s]
     62%|######2   | 329M/528M [00:08<00:04, 44.2MB/s]
     64%|######3   | 336M/528M [00:08<00:03, 51.5MB/s]
     65%|######4   | 341M/528M [00:08<00:03, 51.4MB/s]
     66%|######5   | 346M/528M [00:08<00:03, 52.5MB/s]
     67%|######6   | 352M/528M [00:08<00:03, 56.1MB/s]
     68%|######7   | 358M/528M [00:08<00:03, 57.5MB/s]
     69%|######8   | 364M/528M [00:08<00:02, 57.9MB/s]
     70%|#######   | 370M/528M [00:08<00:03, 54.2MB/s]
     71%|#######1  | 375M/528M [00:09<00:03, 51.3MB/s]
     72%|#######1  | 380M/528M [00:09<00:03, 47.4MB/s]
     73%|#######3  | 386M/528M [00:09<00:02, 52.8MB/s]
     75%|#######4  | 393M/528M [00:09<00:02, 58.6MB/s]
     76%|#######5  | 399M/528M [00:09<00:02, 59.8MB/s]
     77%|#######6  | 405M/528M [00:09<00:02, 56.1MB/s]
     78%|#######7  | 411M/528M [00:09<00:02, 55.0MB/s]
     79%|#######9  | 417M/528M [00:09<00:01, 58.7MB/s]
     80%|########  | 423M/528M [00:09<00:01, 59.1MB/s]
     81%|########1 | 429M/528M [00:10<00:01, 53.2MB/s]
     82%|########2 | 434M/528M [00:10<00:02, 48.1MB/s]
     83%|########3 | 439M/528M [00:10<00:01, 50.1MB/s]
     84%|########4 | 445M/528M [00:10<00:01, 53.8MB/s]
     85%|########5 | 451M/528M [00:10<00:01, 54.9MB/s]
     86%|########6 | 456M/528M [00:10<00:01, 48.5MB/s]
     87%|########7 | 461M/528M [00:10<00:01, 43.2MB/s]
     89%|########8 | 468M/528M [00:10<00:01, 50.3MB/s]
     90%|########9 | 473M/528M [00:11<00:01, 52.5MB/s]
     91%|######### | 479M/528M [00:11<00:00, 52.9MB/s]
     92%|#########1| 485M/528M [00:11<00:00, 55.3MB/s]
     93%|#########2| 490M/528M [00:11<00:00, 55.9MB/s]
     94%|#########4| 496M/528M [00:11<00:00, 58.4MB/s]
     95%|#########5| 503M/528M [00:11<00:00, 61.3MB/s]
     96%|#########6| 509M/528M [00:11<00:00, 61.4MB/s]
     97%|#########7| 515M/528M [00:11<00:00, 60.6MB/s]
     99%|#########8| 520M/528M [00:11<00:00, 54.3MB/s]
    100%|#########9| 526M/528M [00:11<00:00, 54.8MB/s]
    100%|##########| 528M/528M [00:12<00:00, 45.9MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify pretrained=True, i.e. do not load default weights
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.996 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
